<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>IntellijIDEA快捷使用</title>
    <url>/2020/07/02/IntellijIDEA%E5%BF%AB%E6%8D%B7%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h1 id="Intellij-IDEA快捷使用"><a href="#Intellij-IDEA快捷使用" class="headerlink" title="Intellij IDEA快捷使用"></a>Intellij IDEA快捷使用</h1><h2 id="1-快捷键"><a href="#1-快捷键" class="headerlink" title="1. 快捷键"></a>1. 快捷键</h2><h3 id="1-1-按键说明"><a href="#1-1-按键说明" class="headerlink" title="1.1. 按键说明"></a>1.1. 按键说明</h3><table>
<thead>
<tr>
<th>按键</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>+</td>
<td>需要同时按下加号左右两侧的键</td>
</tr>
<tr>
<td>,</td>
<td>按下逗号左侧的键后，松开，然后按下逗号右侧的键</td>
</tr>
<tr>
<td>Ctrl</td>
<td>控制键，键盘上标记了<code>Ctrl</code>的键，在Mac键盘上标记为<code>control</code></td>
</tr>
<tr>
<td>Shift</td>
<td>上档键，键盘上标记了<code>Shift</code>的键</td>
</tr>
<tr>
<td>Alt</td>
<td>切换键，键盘上标记了<code>Alt</code>的键，在Mac键盘上与<code>Option</code>是同一个键</td>
</tr>
<tr>
<td>Command</td>
<td>命令键，<strong>Mac键盘独有</strong>，标记了<code>Command</code>的键</td>
</tr>
<tr>
<td>Enter</td>
<td>回车键，键盘上标记了<code>Enter</code>的键，在Mac键盘上与<code>return</code>是同一个键</td>
</tr>
<tr>
<td>Space</td>
<td>空格键，键盘上最下方、最大的按键</td>
</tr>
<tr>
<td>Up / Down</td>
<td>方向上/方向下，通常在键盘上标记了向上/向下的箭头</td>
</tr>
</tbody></table>
<p>某些快捷键可能与操作系统或其它软件的全局快捷键是冲突的，则按下会无效或执行其它命令，可以在Intellij IDEA的设置的<strong>Keymap</strong>中修改为其它按键。</p>
<p>以下快捷键是Intellij IDEA的默认风格快捷键，如果改成了Eclipse风格或其它风格，请参考所更改的设置。</p>
<p>标记了<code>[!]</code>是可能存在冲突的快捷键。</p>
<p>全部快捷键可在Intellij IDEA的设置的<strong>Keymap</strong>中查看，或者查看官方文档：<a href="https://resources.jetbrains.com/storage/products/intellij-idea/docs/IntelliJIDEA_ReferenceCard.pdf?_ga=2.5349558.422550521.1580708138-1891300040.1568641704" target="_blank" rel="noopener">https://resources.jetbrains.com/storage/products/intellij-idea/docs/IntelliJIDEA_ReferenceCard.pdf?_ga=2.5349558.422550521.1580708138-1891300040.1568641704</a></p>
<p>在各种编辑软件中都会使用到的快捷键可能不会被列举到以下各表中，例如<code>Ctrl</code> + <code>C</code>表示<strong>复制</strong>，在各种编辑软件中都是这样设计的，就不重复列举了。</p>
<h3 id="1-2-推荐快捷键"><a href="#1-2-推荐快捷键" class="headerlink" title="1.2. 推荐快捷键"></a>1.2. 推荐快捷键</h3><table>
<thead>
<tr>
<th>Windows / Linux</th>
<th>Mac OS</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><strong>[!]</strong> Ctrl + Space</td>
<td>Ctrl + Space</td>
<td>基本代码提示</td>
</tr>
<tr>
<td>Ctrl + Shift + Space</td>
<td>Ctrl + Shift + Space</td>
<td>智能代码提示</td>
</tr>
<tr>
<td>Shift, Shift</td>
<td>Shift, Shift</td>
<td>全局查找</td>
</tr>
<tr>
<td>Alt + Enter</td>
<td>Option + Enter</td>
<td>代码错误解决方案</td>
</tr>
<tr>
<td>Alt + Insert</td>
<td>Command + N 或 Ctrl + Enter</td>
<td>自动生成Bean方法</td>
</tr>
<tr>
<td>Ctrl + P</td>
<td>Command + P</td>
<td>在调用方法时，将光标定位在方法的括号中，提示方法的参数列表</td>
</tr>
<tr>
<td>Shift + F6</td>
<td>Shift + F6</td>
<td>重命名，适用于：在文件列表中对文件重命名，在文件内部对类名、属性名、方法名等重命名</td>
</tr>
</tbody></table>
<h3 id="1-3-常规"><a href="#1-3-常规" class="headerlink" title="1.3. 常规"></a>1.3. 常规</h3><table>
<thead>
<tr>
<th>Windows / Linux</th>
<th>Mac OS</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Ctrl + Shift + A</td>
<td>Command + Shift + A</td>
<td>查找命令（IDE中可执行的命令，例如运行、调试、重命名等）</td>
</tr>
</tbody></table>
<h3 id="1-4-查找与替换"><a href="#1-4-查找与替换" class="headerlink" title="1.4. 查找与替换"></a>1.4. 查找与替换</h3><table>
<thead>
<tr>
<th>Windows / Linux</th>
<th>Mac OS</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Shift, Shift</td>
<td>Shift, Shift</td>
<td>全局查找</td>
</tr>
<tr>
<td>Ctrl + F</td>
<td>Command + F</td>
<td>在当前源代码中查找</td>
</tr>
<tr>
<td>Ctrl + R</td>
<td>Command + R</td>
<td>在当前源代码中替换</td>
</tr>
<tr>
<td>Ctrl + Shift + F</td>
<td>Command + Shift + F</td>
<td>在指定路径（例如整个项目）中查找</td>
</tr>
<tr>
<td>Ctrl + Shift + R</td>
<td>Command + Shift + R</td>
<td>在指定路径（例如整个项目）中替换</td>
</tr>
</tbody></table>
<h3 id="1-5-代码编辑"><a href="#1-5-代码编辑" class="headerlink" title="1.5. 代码编辑"></a>1.5. 代码编辑</h3><table>
<thead>
<tr>
<th>Windows / Linux</th>
<th>Mac OS</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>[!] Ctrl + Space</td>
<td>Ctrl + Space</td>
<td>基本代码提示</td>
</tr>
<tr>
<td>Ctrl + Shift + Space</td>
<td>Ctrl + Shift + Space</td>
<td>智能代码提示</td>
</tr>
<tr>
<td>Ctrl + P</td>
<td>Command + P</td>
<td>在调用方法时，将光标定位在方法的括号中，提示方法的参数列表</td>
</tr>
<tr>
<td>Alt + Insert</td>
<td>Command + N 或 Ctrl + Enter</td>
<td>自动生成Bean方法</td>
</tr>
<tr>
<td>Ctrl + O</td>
<td>Ctrl + O</td>
<td>重写方法</td>
</tr>
<tr>
<td>Ctrl + Alt + T</td>
<td>Command + Option +  T</td>
<td>使用if/try…catch等代码块包裹当前选中代码</td>
</tr>
<tr>
<td>Ctrl + /</td>
<td>Command + /</td>
<td>添加/移除行注释</td>
</tr>
<tr>
<td>Ctrl + Alt + L</td>
<td>Command + Option + L</td>
<td>格式化源代码</td>
</tr>
<tr>
<td>Ctrl + Alt + O</td>
<td>[!] Ctrl + Option + O</td>
<td>整理import语句</td>
</tr>
<tr>
<td>Ctrl + D</td>
<td>Command + D</td>
<td>向下复制代码行</td>
</tr>
<tr>
<td>Ctrl + Y</td>
<td>Command + Delete</td>
<td>删除代码行</td>
</tr>
<tr>
<td>Shift + Enter</td>
<td>Shift + Enter</td>
<td>新增下一行代码，并将光标定位到下一行代码</td>
</tr>
<tr>
<td>Ctrl + Enter</td>
<td>Command + Enter</td>
<td>新增下一行代码，光标在原有位置不变</td>
</tr>
<tr>
<td>Ctrl + +/-</td>
<td>Command + +/-</td>
<td>展开或收起类的某个成员，例如方法、内部类等</td>
</tr>
<tr>
<td>Ctrl + Shift + +/-</td>
<td>Command + Shift + +/-</td>
<td>展开或收起当前类的所有成员</td>
</tr>
<tr>
<td></td>
<td>Option + Shift + 上/下</td>
<td>向上/下移动代码</td>
</tr>
<tr>
<td></td>
<td>Command + Option + V</td>
<td>将光标所在位置的常量声明为局部变量</td>
</tr>
<tr>
<td>Ctrl + Shift + V</td>
<td>Command + Shift + V</td>
<td>从最近复制过的多项中选择某项来粘贴</td>
</tr>
</tbody></table>
<blockquote>
<p>也有很多开发者使用<code>Ctrl</code> + <code>X</code>作为<strong>删除代码行</strong>的快捷键，其本质是<strong>剪切</strong>了代码，当然，只要不粘贴，其效果也是相同的。</p>
</blockquote>
<h3 id="1-6-管理与导航"><a href="#1-6-管理与导航" class="headerlink" title="1.6. 管理与导航"></a>1.6. 管理与导航</h3><table>
<thead>
<tr>
<th>Windows</th>
<th>Mac OS</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Shift + F6</td>
<td>Shift + F6</td>
<td>重命名，适用于：在文件列表中对文件重命名，在文件内部对类名、属性名、方法名等重命名</td>
</tr>
<tr>
<td></td>
<td>Shift + 单击</td>
<td>在选项卡处单击以关闭文件</td>
</tr>
<tr>
<td>Ctrl  + F12</td>
<td>Command + F12</td>
<td>显示当前文档结构</td>
</tr>
<tr>
<td>Ctrl + U</td>
<td>Command + U</td>
<td>打开父类方法，打开父类，需先装光标定位到类名，不适用于打开Object类</td>
</tr>
<tr>
<td>F4 / Ctrl + Enter</td>
<td>Command + 下 / Ctrl + 单击</td>
<td>打开光标所在位置的类、属性、方法的声明</td>
</tr>
</tbody></table>
<h2 id="2-快捷输入"><a href="#2-快捷输入" class="headerlink" title="2. 快捷输入"></a>2. 快捷输入</h2><h3 id="2-1-操作方式"><a href="#2-1-操作方式" class="headerlink" title="2.1. 操作方式"></a>2.1. 操作方式</h3><p>可以通过快捷输入简单的内容后按下Enter键，快速完成特定的代码内容，这些内容可以在设置的Editor &gt; Live Templates中查看或调整。</p>
<h3 id="2-2-常规"><a href="#2-2-常规" class="headerlink" title="2.2. 常规"></a>2.2. 常规</h3><table>
<thead>
<tr>
<th>输入内容</th>
<th>等效代码</th>
</tr>
</thead>
<tbody><tr>
<td><code>psvm</code></td>
<td><code>public static void main(String[] args) {}</code></td>
</tr>
<tr>
<td><code>sout</code></td>
<td><code>System.out.println();</code></td>
</tr>
<tr>
<td><code>serr</code></td>
<td><code>System.err.println();</code></td>
</tr>
<tr>
<td><code>soutm</code></td>
<td><code>System.out.println(&quot;类名.方法名&quot;);</code></td>
</tr>
<tr>
<td><code>soutp</code></td>
<td><code>System.out.println(&quot;参数1 = [值1], 参数2 = [值2], ... , 参数N = [值N]&quot;);</code></td>
</tr>
<tr>
<td><code>soutv</code></td>
<td><code>System.out.println(&quot;参数名 = 值&quot;);</code></td>
</tr>
</tbody></table>
<h3 id="2-3-声明静态常量"><a href="#2-3-声明静态常量" class="headerlink" title="2.3. 声明静态常量"></a>2.3. 声明静态常量</h3><table>
<thead>
<tr>
<th>输入内容</th>
<th>等效代码</th>
</tr>
</thead>
<tbody><tr>
<td><code>psf</code></td>
<td><code>public static final</code></td>
</tr>
<tr>
<td><code>prsf</code></td>
<td><code>private static final</code></td>
</tr>
<tr>
<td><code>psfi</code></td>
<td><code>public static final int</code></td>
</tr>
<tr>
<td><code>psfs</code></td>
<td><code>public static final String</code></td>
</tr>
</tbody></table>
<h3 id="2-4-判断"><a href="#2-4-判断" class="headerlink" title="2.4. 判断"></a>2.4. 判断</h3><table>
<thead>
<tr>
<th>输入内容</th>
<th>等效代码</th>
</tr>
</thead>
<tbody><tr>
<td><code>ifn</code></td>
<td><code>if (变量 == null) {}</code></td>
</tr>
<tr>
<td><code>inn</code></td>
<td><code>if (变量 != null) {}</code></td>
</tr>
<tr>
<td><code>inst</code></td>
<td><code>if (变量 instanceof 类) {}</code></td>
</tr>
</tbody></table>
<h3 id="2-5-循环与遍历"><a href="#2-5-循环与遍历" class="headerlink" title="2.5. 循环与遍历"></a>2.5. 循环与遍历</h3><table>
<thead>
<tr>
<th>输入内容</th>
<th>等效代码</th>
</tr>
</thead>
<tbody><tr>
<td><code>fori</code></td>
<td><code>for (int 循环变量 = 0; 循环变量 &lt; ; i++) {}</code></td>
</tr>
<tr>
<td><code>itar</code></td>
<td><code>for (int 循环变量 = 0; 循环变量 &lt; 数组.length(); i++) { 类型 数组元素变量名 = 数组[i]}</code></td>
</tr>
<tr>
<td><code>iter</code></td>
<td><code>for (元素类型 变量名 : 被遍历对象) {}</code></td>
</tr>
<tr>
<td><code>itli</code></td>
<td><code>for (int 循环变量 = 0; 循环变量 &lt; 集合.size(); i++) { 类型 集合元素变量名 = 集合.get(循环变量); }</code></td>
</tr>
</tbody></table>
<h2 id="3-快捷输入–高级"><a href="#3-快捷输入–高级" class="headerlink" title="3. 快捷输入–高级"></a>3. 快捷输入–高级</h2><h3 id="3-1-遍历数组或集合对象"><a href="#3-1-遍历数组或集合对象" class="headerlink" title="3.1. 遍历数组或集合对象"></a>3.1. 遍历数组或集合对象</h3><p>假设存在名为<code>numbers</code>的<code>int</code>数组或集合，输入<code>numbers.for</code>即可生成增强for循环代码，格式如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> number : numbers) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-2-为值声明变量"><a href="#3-2-为值声明变量" class="headerlink" title="3.2. 为值声明变量"></a>3.2. 为值声明变量</h3><p>假设需要声明<code>int</code>类型的变量，其值为<code>1</code>，输入<code>1.var</code>即可生成对应的声明语句，格式如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<p>整型数字默认生成的变量名是<code>i</code>，代码生成后，可以自行调整。</p>
<p>同理，假设需要声明<code>String</code>类型的变量，其值为<code>&quot;Java&quot;</code>，输入<code>&quot;Java&quot;.var</code>即可，格式如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String java = <span class="string">"Java"</span>;</span><br></pre></td></tr></table></figure>

<p>字符串类型默认生成的变量名有多种情况，例如字符串内容是简单字母时，默认变量名就是字母，如果字母首字母是大写的，也会自动使用首字母小写作为默认变量名，字符串类型是汉字时，默认变量名就是汉字，字符串中包含不允许组成变量名的字符时，会使用<code>s</code>或<code>s1</code>、<code>s2</code>等作为默认变量名，当然，在代码生成后，都可以自行调整。</p>
<p>其它数据类型的值也可以使用同样的方法声明出变量，例如输入<code>new Date().var</code>时，就可以生成：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Date date = <span class="keyword">new</span> Date();</span><br></pre></td></tr></table></figure>

<h3 id="3-3-判断对象是否为空"><a href="#3-3-判断对象是否为空" class="headerlink" title="3.3. 判断对象是否为空"></a>3.3. 判断对象是否为空</h3><p>假设存在名为<code>x</code>的变量，需要判断是否为空，输入<code>x.null</code>然后在提示菜单中选择<code>null</code>一栏回车，即可生成：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (x == <span class="keyword">null</span>) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果需要判断是否非空，则输入<code>x.no</code>后选择<code>notnull</code>一栏并回车，即可生成：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (x != <span class="keyword">null</span>) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<p>未完，某天再续……</p>
]]></content>
  </entry>
  <entry>
    <title>Exception和Error有什么区别（转）</title>
    <url>/2020/07/06/2020-07-06-Exception%E5%92%8CError%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB%EF%BC%88%E8%BD%AC%EF%BC%89/</url>
    <content><![CDATA[<h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>首先Exception和Error都是继承于Throwable 类，在 Java 中只有 Throwable 类型的实例才可以被抛出（throw）或者捕获（catch），它是异常处理机制的基本组成类型。</p>
<p>Exception和Error体现了JAVA这门语言对于异常处理的两种方式。</p>
<p>Exception是java程序运行中可预料的异常情况，咱们可以获取到这种异常，并且对这种异常进行业务外的处理。</p>
<p>Error是java程序运行中不可预料的异常情况，这种异常发生以后，会直接导致JVM不可处理或者不可恢复的情况。所以这种异常不可能抓取到，比如OutOfMemoryError、NoClassDefFoundError等。</p>
<p>其中的Exception又分为检查性异常和非检查性异常。两个根本的区别在于，检查性异常 必须在编写代码时，使用try catch捕获（比如：IOException异常）。非检查性异常 在代码编写使，可以忽略捕获操作（比如：ArrayIndexOutOfBoundsException），这种异常是在代码编写或者使用过程中通过规范可以避免发生的。 切记，Error是Throw不是Exception 。</p>
<p>其中有一个比较经典的面试题目， 就是 NoClassDefFoundError 和 ClassNotFoundException 有什么区别</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">区别一： NoClassDefFoundError它是Error，ClassNotFoundException是</span><br><span class="line">Exception。</span><br><span class="line"></span><br><span class="line">区别二：还有一个区别在于NoClassDefFoundError是JVM运行时通过classpath加载类</span><br><span class="line">时，找不到对应的类而抛出的错误。ClassNotFoundException是在编译过程中如果可能出现此异常，在编译过程中必须将ClassNotFoundException异常抛出！</span><br><span class="line"></span><br><span class="line">NoClassDefFoundError发生场景如下：</span><br><span class="line">    1、类依赖的class或者jar不存在 （简单说就是maven生成运行包后被篡改）</span><br><span class="line">    2、类文件存在，但是存在不同的域中 （简单说就是引入的类不在对应的包下)</span><br><span class="line">    3、大小写问题，javac编译的时候是无视大小的，很有可能你编译出来的class文件就与想要的不一样！这个没有做验证</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ClassNotFoundException发生场景如下：</span><br><span class="line">    1、调用class的forName方法时，找不到指定的类</span><br><span class="line">    2、ClassLoader 中的 findSystemClass() 方法时，找不到指定的类</span><br><span class="line"></span><br><span class="line">举例说明如下:</span><br><span class="line">    Class.forName(&quot;abc&quot;); 比如abc这个类不存项目中，代码编写时，就会提示此异常是检查性异常，比如将此异常抛出。</span><br></pre></td></tr></table></figure>

<p>第二，理解 Java 语言中操作 Throwable 的元素和实践。掌握最基本的语法是必须的，如 try-catch-finally 块，throw、throws 关键字等。与此同时，也要懂得如何处理典型场景。</p>
<p>throw是存在于方法的代码块中，而throws是存在于方法外围，一般是在方法名后边 throws XXXException;</p>
<p>有个重要的点需要记住， 就是try-catch-finally中rerun的执行顺序问题</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">try&#123;</span><br><span class="line">    retrun 3;</span><br><span class="line">&#125;catch&#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;finally&#123;</span><br><span class="line">    return 4;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;上边情况下，实际返回的是4；</span><br><span class="line"></span><br><span class="line">try&#123;</span><br><span class="line">    int x &#x3D; 3;</span><br><span class="line">    retrun x;</span><br><span class="line">&#125;catch&#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;finally&#123;</span><br><span class="line">    x++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;上边情况下，实际返回的3；</span><br></pre></td></tr></table></figure>

<p>这是为什么呢？ 因为finally的业务操作是在try业务操作的return返回调用者者之前执行。按照刚才第一种情况，实际情况是，执行完try中的业务逻辑就，return返回的操作会先存储到一个临时的堆栈中，此时不给调用者返回，随后执行finally中的业务代码。如果finally中有return操作，那么就会把finally中的return值与try中的return值进行替换。随后将最终数据返回给调用者。</p>
<p><strong>知识扩展</strong></p>
<p>前面谈的大多是概念性的东西，下面我来谈些实践中的选择，我会结合一些代码用例进行分析。</p>
<p>先开看第一个吧，下面的代码反映了异常处理中哪些不当之处？</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">try &#123;</span><br><span class="line">  &#x2F;&#x2F; 业务代码</span><br><span class="line">  &#x2F;&#x2F; …</span><br><span class="line">  Thread.sleep(1000L);</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">  &#x2F;&#x2F; Ignore it</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>这段代码虽然很短，但是已经违反了异常处理的两个基本原则。</p>
</blockquote>
<p>第一，<strong>尽量不要捕获类似 Exception 这样的通用异常，而是应该捕获特定异常</strong>，在这里是 Thread.sleep() 抛出的 InterruptedException。</p>
<p>这是因为在日常的开发和合作中，我们读代码的机会往往超过写代码，软件工程是门协作的艺术，所以我们有义务让自己的代码能够直观地体现出尽量多的信息，而泛泛的 Exception 之类，恰恰隐藏了我们的目的。另外，我们也要保证程序不会捕获到我们不希望捕获的异常。比如，你可能更希望 RuntimeException 被扩散出来，而不是被捕获。</p>
<p>进一步讲，除非深思熟虑了，否则不要捕获 Throwable 或者 Error，这样很难保证我们能够正确程序处理 OutOfMemoryError。</p>
<p>第二，<strong>不要生吞（swallow）异常</strong>。这是异常处理中要特别注意的事情，因为很可能会导致非常难以诊断的诡异情况。</p>
<p>生吞异常，往往是基于假设这段代码可能不会发生，或者感觉忽略异常是无所谓的，但是千万不要在产品代码做这种假设！</p>
<p>如果我们不把异常抛出来，或者也没有输出到日志（Logger）之类，程序可能在后续代码以不可控的方式结束。没人能够轻易判断究竟是哪里抛出了异常，以及是什么原因产生了异常。</p>
<p>再来看看第二段代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">try &#123;</span><br><span class="line">   &#x2F;&#x2F; 业务代码</span><br><span class="line">   &#x2F;&#x2F; …</span><br><span class="line">&#125; catch (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这段代码作为一段实验代码，它是没有任何问题的，但是在产品代码中，通常都不允许这样处理。你先思考一下这是为什么呢？</p>
<blockquote>
<p>这样的代码在代码规范中是没有问题的，他的问题出在，异常中的异常日志如何输出的问题。按照上边的输出，如果实在复杂的系统中，会判断不出来，异常具体在哪里打印出来的。<br>尤其是对于分布式系统，如果发生异常，但是无法找到堆栈轨迹（stacktrace），这纯属是为诊断设置障碍。所以，最好使用产品日志，详细地输出到日志系统里</p>
</blockquote>
<p>  还有一种处理方式，可自定义异常，将业务异常转换为业务术语，但是抛出异常时，必须把异常的cause信息打印出，方便跟踪问题，在最短的时间内，解决问题。但是需要考虑两点</p>
<p>自定异常时，需要考虑自定义异常是否为检查性异常，因为这种类型设计的初衷更是为了从异常情况恢复，作为异常设计者，我们往往有充足信息进行分类。</p>
<p>在保证诊断信息足够的同时，也要考虑避免包含敏感信息，因为那样可能导致潜在的安全问题。如果我们看 Java 的标准类库，你可能注意到类似 java.net.ConnectException，出错信息是类似“ Connection refused (Connection refused)”，而不包含具体的机器名、IP、端口等，一个重要考量就是信息安全。类似的情况在日志中也有，比如，用户数据一般是不可以输出到日志里面的。</p>
<blockquote>
<p>对于异常中的检查性异常，我们简单的说一下。目前检查性异常被业界说是java的一种设计缺陷。有一下几点可以参考一下</p>
</blockquote>
<p> Checked Exception 的假设是我们捕获了异常，然后恢复程序。但是，其实我们大多数情况下，根本就不可能恢复。Checked Exception 的使用，已经大大偏离了最初的设计目的。<br> 当然，很多人也觉得没有必要矫枉过正，因为确实有一些异常，比如和环境相关的 IO、网络等，其实是存在可恢复性的，而且 Java 已经通过业界的海量实践，证明了其构建高质量软件的能力。</p>
<blockquote>
<p>我们从性能角度来审视一下 Java 的异常处理机制，这里有两个可能会相对昂贵的地方：</p>
</blockquote>
<ol>
<li>try-catch 代码段会产生额外的性能开销，或者换个角度说，它往往会影响 JVM 对代码进行优化，所以建议仅捕获有必要的代码段，尽量不要一个大的 try 包住整段的代码；与此同时，利用异常控制代码流程，也不是一个好主意，远比我们通常意义上的条件语句（if/else、switch）要低效。</li>
<li>java 每实例化一个 Exception，都会对当时的栈进行快照，这是一个相对比较重的操作。如果发生的非常频繁，这个开销可就不能被忽略了。</li>
</ol>
<p>原文地址</p>
<p><a href="https://blog.csdn.net/weixin_42124070/article/details/80833629" target="_blank" rel="noopener">https://blog.csdn.net/weixin_42124070/article/details/80833629</a></p>
]]></content>
      <tags>
        <tag>Exception</tag>
      </tags>
  </entry>
  <entry>
    <title>Tomcat中配置去掉项目名</title>
    <url>/2020/07/06/tomcat%E5%8E%BB%E6%8E%89%E9%A1%B9%E7%9B%AE%E5%90%8D/</url>
    <content><![CDATA[<p>负载均衡中war放在tomcat中时，访问会带有包名。</p>
<h5 id="打开tomcat-conf-server-xml-把"><a href="#打开tomcat-conf-server-xml-把" class="headerlink" title="打开tomcat/conf/server.xml,把"></a>打开tomcat/conf/server.xml,把</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;Context path&#x3D;&quot;&#x2F;&quot; docBase&#x3D;&quot;&#x2F;usr&#x2F;local&#x2F;tomcat&#x2F;tomcat-8102&#x2F;webapps&#x2F;blog&quot; reloadable&#x3D;&quot;true&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure>



<p>添加到<code>&lt;Host&gt;&lt;/Host&gt;</code>标签中。</p>
]]></content>
      <tags>
        <tag>tomcat</tag>
        <tag>nginx</tag>
        <tag>负载均衡</tag>
      </tags>
  </entry>
  <entry>
    <title>博客项目</title>
    <url>/2020/06/29/%E5%8D%9A%E5%AE%A2%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<h1 id="博客项目"><a href="#博客项目" class="headerlink" title="博客项目"></a>博客项目</h1><h2 id="实现功能"><a href="#实现功能" class="headerlink" title="实现功能"></a>实现功能</h2><ol>
<li><p>Nginx反向代理、动静分离</p>
</li>
<li><p>部署在服务器上并添加SSL证书</p>
</li>
<li><p>使用手机号登录注册</p>
</li>
<li><p>使用QQ号登录注册</p>
</li>
<li><p>发布博客支持emoji表情包</p>
</li>
<li><p>支持发送图片（仅单张）</p>
</li>
<li><p>发布的文字支持MarkDown语法</p>
</li>
<li><p>发送的图片支持点击放大预览</p>
</li>
<li><p>实时获取微博热搜话题显示在主页</p>
</li>
<li><p>获取用户是用什么设备发送的博客，例如android，iPhone</p>
</li>
<li><p>根据设置的出生日期计算年龄</p>
</li>
<li><p>点赞功能</p>
</li>
<li><p>搜索功能</p>
</li>
<li><p>置顶功能</p>
</li>
<li><p>更换头像</p>
</li>
</ol>
<h2 id="技术框架"><a href="#技术框架" class="headerlink" title="技术框架"></a>技术框架</h2><p>SpringBoot  核心框架  </p>
<p>Appache Shiro  安全框架  </p>
<p>Mybatis  ORM框架  </p>
<p>Redis  缓存数据库</p>
<p>Nginx web服务器</p>
<p>BootStrap 前端框架</p>
<h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a><a href="https://blog.igali.xyz" target="_blank" rel="noopener">项目地址</a></h2>]]></content>
  </entry>
  <entry>
    <title>redis命令</title>
    <url>/2020/06/24/redis%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p><strong>开启redis命令</strong></p>
<p>systemctl start pedis.service</p>
]]></content>
  </entry>
  <entry>
    <title>linux防火墙常用命令</title>
    <url>/2020/06/24/linux%E9%98%B2%E7%81%AB%E5%A2%99%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h5 id="开启防火墙端口"><a href="#开启防火墙端口" class="headerlink" title="开启防火墙端口"></a>开启防火墙端口</h5><p>​    firewall-cmd –zone=public –add-port=80/tcp –permanent</p>
<h5 id="重启防火墙"><a href="#重启防火墙" class="headerlink" title="重启防火墙"></a>重启防火墙</h5><p>systemctl restart firewalld.service</p>
<h5 id="查看已经开放的端口"><a href="#查看已经开放的端口" class="headerlink" title="查看已经开放的端口"></a><strong>查看已经开放的端口</strong></h5><p>firewall-cmd –list-ports</p>
]]></content>
  </entry>
  <entry>
    <title>面试题笔记</title>
    <url>/2020/04/08/%E9%9D%A2%E8%AF%95%E9%A2%98%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h2><h3 id="JVM的工作原理"><a href="#JVM的工作原理" class="headerlink" title="JVM的工作原理"></a>JVM的工作原理</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">JVM是JRE的一部分，Java语言最重要的特点就是跨平台运行。使用JVM就是为了支持与操作系统无关，实现跨平台。(怎么跨平台的：jvm它是一个虚构出来的计算机，是通过在实际的计算机上仿真模拟各种计算机功能来实现的。JVM有自己完善的硬件架构，如处理器、堆栈、寄存器等，还具有相应的指令系统)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">一、JVM内存分为堆、方法区、虚拟机栈、本地方法栈、程序计数器五个部分。</span><br><span class="line">二、堆和方法区是线程共享的，虚拟机栈、本地方法栈和程序计数器是线程隔离的。</span><br><span class="line">三、1.堆主要是存放对象实例的也包括数组，是垃圾管理的主要作用区。</span><br></pre></td></tr></table></figure>

<h3 id="JVM的生命周期"><a href="#JVM的生命周期" class="headerlink" title="JVM的生命周期"></a>JVM的生命周期</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">（1）JVM实例的诞生：当启动一个Java程序时，一个JVM实例就产生了，任何一个拥有public static void main(String[] args)函数的class都可以作为JVM实例运行的起点。 </span><br><span class="line"></span><br><span class="line">（2）JVM实例的运行 main()作为该程序初始线程的起点，任何其他线程均由该线程启动。JVM内部有两种线程：守护线程和非守护线程，main()属于非守护线程，守护线程通常由JVM自己使用，java程序也可以标明自己创建的线程是守护线程。 </span><br><span class="line"></span><br><span class="line">（3）JVM实例的消亡：当程序中的所有非守护线程都终止时，JVM才退出；若安全管理器允许，程序也可以使用Runtime类或者System.exit()来退出。</span><br></pre></td></tr></table></figure>

<h3 id="堆与栈"><a href="#堆与栈" class="headerlink" title="堆与栈"></a>堆与栈</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">栈是运行时的单位，而堆是存储的单位。</span><br><span class="line"></span><br><span class="line">栈解决程序的运行问题，即程序如何执行，或者说如何处理数据；堆解决的是数据存储的问题，即数据怎么放、放在哪儿。</span><br><span class="line">在Java中一个线程就会相应有一个线程栈与之对应，这点很容易理解，因为不同的线程执行逻辑有所不同因此需要一个独立的线程栈。而堆则是所有线程共享的。栈因为是运行单位，因此里面存储的信息都是跟当线程（或程序）相关信息的。包括局部变量、程序运行状态、方法返回值等等；而堆只负责存储对象信息。</span><br><span class="line"></span><br><span class="line">堆中存的是对象。栈中存的是基本数据类型和堆中对象的引用。</span><br><span class="line"></span><br><span class="line">堆和栈中，栈是程序运行最根本的东西。程序运行可以没有堆，但是不能没有栈。</span><br></pre></td></tr></table></figure>



<h2 id="Spring-MVC"><a href="#Spring-MVC" class="headerlink" title="Spring MVC"></a>Spring MVC</h2><h3 id="SpringMVC的流程"><a href="#SpringMVC的流程" class="headerlink" title="SpringMVC的流程"></a>SpringMVC的流程</h3><pre><code>发送请求-接收请求-记录请求与控制器的对应关系-委托请求到控制器-处理后得到的数据及视图名称-根据视图名称确定具体的视图组件-产生响应</code></pre><h3 id="SpringMVC能否从请求url中截取参数？"><a href="#SpringMVC能否从请求url中截取参数？" class="headerlink" title="SpringMVC能否从请求url中截取参数？"></a>SpringMVC能否从请求url中截取参数？</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">可以利用@PathVariable实现。在Controller方法上添加的&#96;@RequestMapping&#96;注解中，使用&#96;&#123;变量名&#125;&#96;的方式，将url中指定位置的值作为变量。在对应方法的参数中，声明一个接收该变量值的参数，前面使用&#96;@PathVariable(&quot;变量名&quot;)&#96;标注。</span><br></pre></td></tr></table></figure>

<h3 id="SpringMVC框架的核心组件"><a href="#SpringMVC框架的核心组件" class="headerlink" title="SpringMVC框架的核心组件"></a>SpringMVC框架的核心组件</h3><p>-<code>DispatcherServlet</code>：前端控制器，用于接收所有请求，并组织分发；</p>
<p>-<code>HandlerMapping</code>：记录请求路径与控制器的对应关系；</p>
<p>-<code>Controller</code>：自定义的处理请求的控制器组件；</p>
<p>-<code>ModelAndView</code>：控制器组件处理完请求之后得到的结果，包含数据与视图名称；</p>
<p>-<code>ViewResolver</code>：视图解析器，可以根据视图名称，确定具体的视图组件。</p>
<h3 id="1-关于-RequestMapping注解"><a href="#1-关于-RequestMapping注解" class="headerlink" title="1. 关于@RequestMapping注解"></a>1. 关于@RequestMapping注解</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在处理请求的方法之前添加&#96;@RequestMapping&#96;注解，可以配置请求路径与处理请求的方法的映射关系！</span><br></pre></td></tr></table></figure>



<h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- 什么是索引：索引是数据库中提高查询效率的技术，数据量越大索引效果越明显，索引类似于目录</span><br><span class="line"></span><br><span class="line">- 为什么使用索引：数据会零散的保存在磁盘中的每个磁盘块中，如果不使用索引，查找数据只能挨个遍历每一个磁盘块进行查找，如果使用了索引后，磁盘块会以树桩结构进行保存，查找数据时大大降低了磁盘块的访问量，从而达到了提高查询效率的目的</span><br></pre></td></tr></table></figure>



<h2 id="转发与重定向的区别"><a href="#转发与重定向的区别" class="headerlink" title="转发与重定向的区别"></a>转发与重定向的区别</h2><h3 id="1-能否共享request对象"><a href="#1-能否共享request对象" class="headerlink" title="1.能否共享request对象?"></a>1.能否共享request对象?</h3><pre><code>转发可以，而重定向不行。
注：
    因为request和response这两个对象的生存时间是在一次请求与响应
期间存在。
    转发是一次请求，重定向是两次请求。
转发是服务器内部的行为，具体表现为</code></pre><h2 id="散列表"><a href="#散列表" class="headerlink" title="散列表"></a>散列表</h2><p>1.什么是散列表?</p>
<pre><code>依据关键码值(key)直接获取表中对应纪录的一种数据结构。
其中，将关键码值映射到表中的位置的函数叫散列函数(hash函数),
存放记录的数组称之为散列表。</code></pre><p>2.散列表的工作原理:<br>    首先我们使用散列函数将给定键转化为一个“数组的索引”，(key如果相同就是碰撞)<br>    得到了索引后，我们就可以像访问数组一样，通过这个索引访问到相应的键值对。<br>3.散列表常见的一些实现类。</p>
<pre><code>Hashtable: 线程安全，但是性能低,不建议使用。
HashMap:线程不安全，性能高。
    注：
        可以调用Collections.synchronizedMap来将hashMap
    转换成一个线程安全的map。

ConcurrentHashMap: 线程安全，并且性能良好。</code></pre><h2 id="1-事务"><a href="#1-事务" class="headerlink" title="1.事务"></a>1.事务</h2><pre><code>(1)什么是事务?
事务(Transaction)：是数据库领域中，一种能保证多项增删改操作能够全部执行成功，或全部执行失败的机制！

(2)事务的特点(ACID)
    A.原子性（atomicity):
            事务所涉及的各个操作要么全部成功，要么全部失败。
    C.一致性（consistency):
            事务完成之后，不允许非法的数据保存到数据库。一个事务在执行之前和执行之后，数据库都必须处于一致性状态。
    I.隔离性（isolation）：
            多个事务可以同时执行，彼此不所影响。
            事务隔离分为不同级别，包括读未提交（Read uncommitted）、读提交（read committed）、可重复读（repeatable read）和串行化（Serializable）。
    D.持久性（durability）：
            事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。</code></pre><h2 id="业务层"><a href="#业务层" class="headerlink" title="业务层"></a>业务层</h2><p><strong>什么是业务：业务(Service)，对于普通用户来说，就是一个“功能”，但是，它可能是由多项数据操作组成的，例如“用户注册”就是一个业务，它至少由“根据用户名查询数据”和“插入数据”组成，在编写代码时，业务层主要完成业务流程和业务逻辑的控制，业务流程指的是先做什么、后做什么，业务逻辑指的是什么情况下能做什么、不能做什么，最终，业务层的目标是保障数据的完整性、安全性。</strong></p>
<p>####POJO<br>POJO是各种实体类的统称，常用的实体类包括DO/DTO/BO/VO。</p>
<ol>
<li>DO：与数据库表相对应的实体类，属性与表中字段相对应</li>
<li>DTO：业务层传输数据时使用的实体类</li>
<li>BO：业务层对外提供远程调用时使用的实体类</li>
<li>VO：供视图层使用的实体类</li>
</ol>
<ul>
<li><h1 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h1><p>什么是Spring：<br>  简单来说，<strong>Spirng是一个轻量级的控制反转（IoC)和面向切面（AOP)的容器框架。</strong><br>##AOP ##<br>什么是AOP：<br>  简单地说，<strong>就是将那些与业务无关，却为业务模块所共同调用的逻辑或责任封装起来，便于减少系统的重复代码，降低 模块间的耦合度，并有利于未来的可操作性和可维护性。</strong><br>  核心关注点和横切关注点。业务处理的主要流程是核心关注点，与之关系不大的部分是横切关注点。横 切关注点的一个特点是，他们经常发生在核心关注点的多处，而各处都基本相似。比如权限认证、日志、事务处理。<br>  Aop 的作用在于分离系统中的各种关注点，将核心关注点和横切关注点分离开来。</p>
</li>
</ul>
<h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">King</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> King king = <span class="keyword">new</span> King();</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">King</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> King <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> king;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上是饿汉式单例模式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">King</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> King king;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">King</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> King <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (king == <span class="keyword">null</span>) &#123; <span class="comment">// 判断是否有必须加锁，如果没有该判断，则效率可能偏低</span></span><br><span class="line">            <span class="keyword">synchronized</span>(<span class="string">"java"</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (king == <span class="keyword">null</span>) &#123; <span class="comment">// 判断是否有必须创建对象，如果没有该判断，则可能创建多个对象</span></span><br><span class="line">                    king = <span class="keyword">new</span> King();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> king;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上，就是完整的懒汉式的单例模式！</p>
<p><strong>小结：单例模式的特点就是“单一实例”，表现为“同一时间内，某个类的对象只有1个”！单例模式分为“饿汉式”和“懒汉式”这2种，前者是“早早的创建出对象，随时可以获取”，后者是“不到逼不得已不会创建对象”！</strong></p>
<h2 id="自动装配"><a href="#自动装配" class="headerlink" title="自动装配"></a>自动装配</h2><p><code>byName</code>：要求被装配的属性名称，与被Spring管理的对象的名称（调用<code>getBean()</code>方法给出的参数名）必须相同；</p>
<p><code>byType</code>：要求被装配的属性的类型，在Spring容器中存在匹配类型的对象，当应用这种机制时，必须在Spring容器中保证匹配类型的对象只有1个，否则，将会出现<code>NoUniqueBeanDefinitionException</code>异常；</p>
<h2 id="什么是索引"><a href="#什么是索引" class="headerlink" title="什么是索引"></a>什么是索引</h2><pre><code>索引是数据库中提高查询效率的技术，数据量越大索引效果越明显，索引类似于目录
索引是一个排序的列表，在这个列表中存储着索引的值和包含这个值的数据所在行的物理地址，在数据十分庞大的时候，索引可以大大加快查询的速度，</code></pre><h3 id="为什么使用索引："><a href="#为什么使用索引：" class="headerlink" title="为什么使用索引："></a>为什么使用索引：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">数据会零散的保存在磁盘中的每个磁盘块中，如果不使用索引，查找数据只能挨个遍历每一个磁盘块进行查找，如果使用了索引后，磁盘块会以树桩结构进行保存，查找数据时大大降低了磁盘块的访问量，从而达到了提高查询效率的目的</span><br></pre></td></tr></table></figure>

<h3 id="mysql-索引是怎么实现的？"><a href="#mysql-索引是怎么实现的？" class="headerlink" title="mysql 索引是怎么实现的？"></a>mysql 索引是怎么实现的？</h3><pre><code>具体来说 MySQL 中的索引，不同的数据引擎实现有所不同，但目前主流的数据库引擎的索引都是 B+ 树实现的，B+ 树的搜索效率，
可以到达二分法的性能，找到数据区域之后就找到了完整的数据结构了，所有索引的性能也是更好的。</code></pre><h2 id="什么是Serializable接口"><a href="#什么是Serializable接口" class="headerlink" title="什么是Serializable接口"></a>什么是Serializable接口</h2><pre><code>一个对象序列化的接口，一个类只有实现了Serializable接口，它的对象才能被序列化。</code></pre><h3 id="什么是序列化？"><a href="#什么是序列化？" class="headerlink" title="什么是序列化？"></a>什么是序列化？</h3><pre><code>序列化是将对象状态转换为可保持或传输的格式的过程。与序列化相对的是反序列化，它将流转换为对象。这两个过程结合起来，可以轻松地存储和传输数据。</code></pre><h3 id="为什么要序列化对象"><a href="#为什么要序列化对象" class="headerlink" title="为什么要序列化对象"></a>为什么要序列化对象</h3><pre><code>把对象转换为字节序列的过程称为对象的序列化
把字节序列恢复为对象的过程称为对象的反序列化</code></pre><h3 id="什么情况下需要序列化？"><a href="#什么情况下需要序列化？" class="headerlink" title="什么情况下需要序列化？"></a>什么情况下需要序列化？</h3><pre><code>当我们需要把对象的状态信息通过网络进行传输，或者需要将对象的状态信息持久化，以便将来使用时都需要把对象进行序列化</code></pre><h2 id="和equals"><a href="#和equals" class="headerlink" title="==和equals"></a>==和equals</h2><p>equals 本质上就是 ==，只不过 String 和 Integer 等重写了 equals 方法，把它变成了值比较。</p>
<h3 id="3-关于Session"><a href="#3-关于Session" class="headerlink" title="3. 关于Session"></a>3. 关于Session</h3><p>因为HTTP协议是无状态协议，所以，同一个客户端的多次请求，服务器是无法区分这是来自同一个客户端的，如果需要保存用户的某些数据或状态，就需要使用Session。</p>
<h3 id="4-拦截器-Interceptor"><a href="#4-拦截器-Interceptor" class="headerlink" title="4. 拦截器(Interceptor)"></a>4. 拦截器(Interceptor)</h3><p>拦截器：是一种可以使得若干种请求都会自动的执行其中的代码组件！该组件对所处理的请求可以选择放行，或选择阻止继续执行！</p>
<p>在SpringMVC项目中，如果需要使用拦截器，首先，需要自定义类，实现<code>HandlerInterceptor</code>拦截器接口：</p>
<h3 id="附1：关于拦截器-Interceptor-和过滤器-Filter"><a href="#附1：关于拦截器-Interceptor-和过滤器-Filter" class="headerlink" title="附1：关于拦截器(Interceptor)和过滤器(Filter)"></a>附1：关于拦截器(Interceptor)和过滤器(Filter)</h3><p>过滤器(Filter)是Java EE中的组件，而拦截器(Interceptor)是SpringMVC中的组件！</p>
<p>过滤器(Filter)是执行在所有的<code>Servlet</code>之前的组件，而SpringMVC中的拦截器的第1次执行是在<code>DispatcherServlet</code>之后，且在<code>Controller</code>之前执行的！(对应SpringMVC核心执行流程图，过滤器是1号位置执行，而拦截器第1次执行是在4号位置)</p>
<h2 id="MyBatis框架的作用"><a href="#MyBatis框架的作用" class="headerlink" title="MyBatis框架的作用"></a>MyBatis框架的作用</h2><p>MyBatis框架最直接的作用就是简化持久层开发！</p>
<blockquote>
<p>持久层：处理数据持久化的组件；</p>
</blockquote>
<blockquote>
<p>持久化：将数据永久的存储下来；</p>
</blockquote>
<h2 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h2><h3 id="Set-无序-唯一"><a href="#Set-无序-唯一" class="headerlink" title="Set 无序,唯一"></a>Set 无序,唯一</h3><p>HashSet如何保证元素的唯一性</p>
<p><strong>依赖两个方法：hashCode()和equals()</strong></p>
<p>TreeSet底层数据结构是红黑树</p>
<ol>
<li><p>如何保证元素排序的呢?</p>
<p>自然排序、比较器排序</p>
</li>
<li><p>如何保证元素唯一性的呢?<br>根据比较的返回值是否是0来决定</p>
</li>
</ol>
<h3 id="List-有序-可重复"><a href="#List-有序-可重复" class="headerlink" title="List 有序,可重复"></a>List 有序,可重复</h3><p>ArrayList和Vector底层数据结构是数组</p>
<p>linkedList底层数据结构是链表</p>
<p>只有Vector是线程安全的</p>
<h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><ul>
<li>TreeMap是有序的，HashMap和HashTable是无序的。</li>
<li>Hashtable的方法是同步的，HashMap的方法不是同步的。这是两者最主要的区别。</li>
<li>Hashtable是线程安全的，HashMap不是线程安全的。</li>
</ul>
<h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><h3 id="StringBuffer和StringBuilder的区别"><a href="#StringBuffer和StringBuilder的区别" class="headerlink" title="StringBuffer和StringBuilder的区别"></a>StringBuffer和StringBuilder的区别</h3><p>在改变字符串时，都不会创建新的对象。</p>
<p>不必考虑到线程同步问题，我们应该优先使用StringBuilder类；如果要保证线程安全，自然是StringBuffer。</p>
<h2 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h2><p>在Object类中主要包括clone()、finalize()、equals()、toString()等方法，其中常用的两个方法为equals()和toString()方法。</p>
<p><strong>Object类中的getClass()、notify()、notifyAll()、wait()等方法不能被重写，因为这些方法被定义为final类型。</strong></p>
<h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><h3 id="Error-和-Exception的区别"><a href="#Error-和-Exception的区别" class="headerlink" title="Error 和 Exception的区别"></a>Error 和 Exception的区别</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Exception是java程序运行中可预料的异常情况，咱们可以获取到这种异常，并且对这种异常进行业务外的处理。</span><br><span class="line"></span><br><span class="line">Error是java程序运行中不可预料的异常情况，这种异常发生以后，会直接导致JVM不可处理或者不可恢复的情况。所以这种异常不可能抓取到，比如OutOfMemoryError、NoClassDefFoundError等。</span><br></pre></td></tr></table></figure>

<h3 id="Exception"><a href="#Exception" class="headerlink" title="Exception"></a>Exception</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">其中的Exception又分为检查性异常和非检查性异常。两个根本的区别在于，检查性异常 必须在编写代码时，使用try catch捕获（比如：IOException异常）。非检查性异常 在代码编写使，可以忽略捕获操作（比如：ArrayIndexOutOfBoundsException），这种异常是在代码编写或者使用过程中通过规范可以避免发生的。</span><br></pre></td></tr></table></figure>

<p><strong>它处理的是因为程序设计的瑕疵而引起的问题或者在外的输入等引起的一般性问题，是程序必须处理的。</strong></p>
<h3 id="Error"><a href="#Error" class="headerlink" title="Error"></a>Error</h3><p><code>表示系统级的错误和程序不必处理的异常，如：OutOfMemoryError、NoClassDefFoundError等。</code></p>
]]></content>
  </entry>
</search>
